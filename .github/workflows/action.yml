name: AAutomations

on:
  pull_request:
    types: [opened]

permissions:
  pull-requests: write
  contents: read

jobs:
  add-label:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Add label based on comment
      uses: actions/github-script@v6
      with:
        script: |
          const description = context.payload.pull_request.body;
          if (!description) {
            console.log('No description found');
            return;
          }
          const firstLine = description.split('\n')[0];
          const match = firstLine.match(/^PULL REQUEST TYPE:\s*(.*)$/i);
          
          if (match) {
            const pullRequestType = match[1].trim().toLowerCase();
            let label;

            switch (pullRequestType) {
              case 'api':
                label = 'api';
                break;
              case 'gpt':
                label = 'gpt';
                break;
              case 'kql':
                label = 'kql';
                break;
              default:
                label = 'needs review';
            }

            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: [label]
            });
          } else {
            console.log('No matching PULL REQUEST TYPE found');
          }
  run-script:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get PR description
        id: get-description
        uses: actions/github-script@v6
        with:
          script: |
            const description = context.payload.pull_request.body;
            if (!description) {
              console.log('No description found');
              return;
            }
            const secondLine = description.split('\n')[1];
            const fileNameMatch  = secondLine.match(/^MANIFEST NAME:\s*(.*)$/i);
            if (!fileNameMatch) {
              throw new Error('No file name found in PR description');
            }
            const fileName  = fileNameMatch[1];
            return { fileName: fileName};

      - name: Run PowerShell script
        run: pwsh ./Analysis.ps1 -script "./devices.yaml"
